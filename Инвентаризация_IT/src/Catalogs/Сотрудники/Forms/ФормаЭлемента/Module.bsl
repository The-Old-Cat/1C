&НаСервере
Функция ПолучитьДанныеДокументаРабочиеМеста(ФИОСотрудника)

  ТекстДляВывода = ""; // Инициализируем пустой строкой

  Сотрудник = Справочники.Сотрудники.НайтиПоНаименованию(ФИОСотрудника);

  Если ЗначениеЗаполнено(Сотрудник) Тогда
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    РабочиеМеста.Ссылка,
    |    РабочиеМеста.Ответственный,
    |    РабочиеМеста.Подразделение
    |ИЗ
    |    Документ.РабочиеМеста КАК РабочиеМеста
    |ГДЕ
    |    РабочиеМеста.Ответственный = &Ответственный";

    Запрос.УстановитьПараметр("Ответственный", Сотрудник);
    Результат = Запрос.Выполнить();

    Выборка = Результат.Выбрать();

    Если Выборка.Количество() > 0 Тогда
      Пока Выборка.Следующий() Цикл
        // Формируем строку с информацией о документе, ответственном и подразделении
        ТекстДляВывода = ТекстДляВывода + "- " + Выборка.Ссылка + ", Ответственный: " + Выборка.Ответственный + ", Подразделение: " + Выборка.Подразделение + Символы.ПС; 
      КонецЦикла;
    Иначе
      ТекстДляВывода = "Рабочее место не найдено!";
    КонецЕсли;
  Иначе
    ТекстДляВывода = "Сотрудник с ФИО '" + ФИОСотрудника + "' не найден!";
  КонецЕсли;

  Возврат ТекстДляВывода;

КонецФункции

//@skip-check module-structure-method-in-regions
&НаКлиенте
Функция СформироватьТекстНеобходимыхДействий(УчетныеЗаписи, ФИОСотрудника)
// Формируем текст для вывода
  
  ТекстДляВывода = Элементы.СписокНеобходимыхДействий.Заголовок + Символы.ПС;
  
  ТекстДляВывода = ТекстДляВывода + Символы.ПС + "1. Заблокировать учетные записи: " + Символы.ПС;

  // Счетчик заблокированных учетных записей
  КоличествоЗаблокированных = 0;

  // Сначала проверяем, есть ли строки в табличной части
  Если УчетныеЗаписи.Количество() = 0 Тогда
    ТекстДляВывода = "Информация об учетных записях отсутствует" + Символы.ПС;
  // Если строки есть, проверяем, все ли учетные записи заблокированы
  ИначеЕсли КоличествоЗаблокированных = УчетныеЗаписи.Количество() Тогда
    ТекстДляВывода = "Все учетные записи заблокированы" + Символы.ПС;
  Иначе
    // Перебираем строки табличной части
    Для Каждого СтрокаТабличнойЧасти Из УчетныеЗаписи Цикл
      // Проверяем, заблокирована ли учетная запись
      Если СтрокаТабличнойЧасти.Заблокирована = Ложь Тогда
        ТекстДляВывода = ТекстДляВывода + "- " + СтрокаТабличнойЧасти.УчетнаяЗапись + " " + СтрокаТабличнойЧасти.Логин + " " + Символы.ПС;
      Иначе
        КоличествоЗаблокированных = КоличествоЗаблокированных + 1;
      КонецЕсли;
    КонецЦикла;

    // Проверяем еще раз, все ли учетные записи заблокированы, 
    // после того как прошли по циклу
    Если КоличествоЗаблокированных = УчетныеЗаписи.Количество() Тогда
      ТекстДляВывода = "Все учетные записи заблокированы" + Символы.ПС;
    КонецЕсли;
  КонецЕсли;
	
	ТекстДляВывода = ТекстДляВывода + Символы.ПС + "2. Передать ответственность за ТМЦ: ";

	ТекстДляВывода = ТекстДляВывода + Символы.ПС + ПолучитьДанныеДокументаРабочиеМеста(ФИОСотрудника); 

  Возврат ТекстДляВывода;
КонецФункции


//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура УчетныеЗаписиПриИзменении(Элемент)
	// Вызываем процедуру для формирования текста
	
	СформированныйТекст =  СформироватьТекстНеобходимыхДействий(Объект.УчетныеЗаписи, Объект.Наименование);

	
	Элементы.СписокНеобходимыхДействий.Заголовок = СформированныйТекст;
КонецПроцедуры



// @skip-check module-structure-method-in-regions
&НаКлиенте
Процедура УстановитьВидимость()
	
	//Получить значение чекбокса Уволен
	Уволен = Объект.Уволен;
	
	//Установить видимость групп
	Элементы.ГруппаПриУвольнении.Видимость = Уволен;
	
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура УволенПриИзменении(Элемент)
	УстановитьВидимость();
	
	СформированныйТекст =  СформироватьТекстНеобходимыхДействий(Объект.УчетныеЗаписи, Объект.Наименование);

	Элементы.СписокНеобходимыхДействий.Заголовок = СформированныйТекст;
	
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура СоздатьДокументПередачиОтветственности(Команда)
	ОбъектСотрудника = Объект;
	НаименованиеСотрудника = ОбъектСотрудника.Наименование;
	ПараметрыФормы = Новый Структура("УвольняемыйСотрудник", НаименованиеСотрудника);
	//@skip-check use-non-recommended-method
	ПолучитьФорму("Документ.ПередачаОтветственности.Форма.ФормаДокумента", ПараметрыФормы).Открыть();

КонецПроцедуры



//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимость()
КонецПроцедуры
