//@skip-check module-structure-method-in-regions
&НаСервере
Функция СформироватьСписокРабочихМест(ФИОСотрудника)
    // Формируем начальное значение списка рабочих мест
    СписокРабочихМест = "2. Передать ответственность за ТМЦ:" + Символы.ПС; 

    // Ищем сотрудника в справочнике по ФИО
    Сотрудник = Справочники.Сотрудники.НайтиПоНаименованию(ФИОСотрудника);

    // Если сотрудник найден
    Если ЗначениеЗаполнено(Сотрудник) Тогда
        // Создаем запрос для поиска рабочих мест, за которые отвечает сотрудник
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ
        |    РабочиеМеста.Ссылка,
        |    РабочиеМеста.Ответственный,
        |    РабочиеМеста.Подразделение
        |ИЗ
        |    Документ.РабочиеМеста КАК РабочиеМеста
        |ГДЕ
        |    РабочиеМеста.Ответственный = &Ответственный";

        // Устанавливаем параметр запроса - ссылка на сотрудника
        Запрос.УстановитьПараметр("Ответственный", Сотрудник);
        
        // Выполняем запрос
        Результат = Запрос.Выполнить();

        // Получаем выборку из результата запроса
        Выборка = Результат.Выбрать();

        // Если найдены рабочие места
        Если Выборка.Количество() > 0 Тогда
            // Для каждого рабочего места формируем строку с информацией
            Пока Выборка.Следующий() Цикл
                СписокРабочихМест = СписокРабочихМест +  "- " + Выборка.Ссылка + ", Ответственный: " + Выборка.Ответственный + ", Подразделение: " + Выборка.Подразделение + Символы.ПС;
            КонецЦикла;

            // Делаем видимым элемент формы для передачи ответственности
            Элементы.ПередатьОтсветственность.Видимость = Истина;
        // Если рабочие места не найдены
        Иначе
            // Устанавливаем текст, сообщающий об отсутствии рабочих мест
            СписокРабочихМест = "Рабочее место не найдено!";
            // Скрываем элемент формы для передачи ответственности
            Элементы.ПередатьОтсветственность.Видимость = Ложь;
        КонецЕсли;
    КонецЕсли;
    // Возвращаем сформированный список рабочих мест
    Возврат СписокРабочихМест;
КонецФункции

//@skip-check module-structure-method-in-regions
&НаКлиенте
Функция СформироватьСписокУчетныхЗаписей(УчетныеЗаписи)
    // Формируем начальное значение списка учетных записей для блокировки
    СписокУчетныхЗаписей = "1. Заблокировать учетные записи: " + Символы.ПС;

    // Счетчик заблокированных учетных записей
    КоличествоЗаблокированных = 0;

    // Проверяем, есть ли строки в табличной части "УчетныеЗаписи"
    Если УчетныеЗаписи.Количество() = 0 Тогда
        // Если строк нет, устанавливаем сообщение об отсутствии информации
        СписокУчетныхЗаписей = "Информация об учетных записях отсутствует" + Символы.ПС;
    // Если строки есть
    Иначе
        // Перебираем строки табличной части
        Для Каждого СтрокаТабличнойЧасти Из УчетныеЗаписи Цикл
            // Проверяем, заблокирована ли учетная запись
            Если СтрокаТабличнойЧасти.Заблокирована = Ложь Тогда
                // Если запись не заблокирована, добавляем ее в список для блокировки
                СписокУчетныхЗаписей = СписокУчетныхЗаписей + "- " + СтрокаТабличнойЧасти.УчетнаяЗапись + " " + СтрокаТабличнойЧасти.Логин + " " + Символы.ПС;
            // Если запись уже заблокирована
            Иначе
                // Увеличиваем счетчик заблокированных записей
                КоличествоЗаблокированных = КоличествоЗаблокированных + 1;
            КонецЕсли;
        КонецЦикла;
        // Если все учетные записи уже заблокированы
        Если КоличествоЗаблокированных = УчетныеЗаписи.Количество() Тогда
            // Устанавливаем сообщение о том, что все записи заблокированы
            СписокУчетныхЗаписей = "Все учетные записи заблокированы" + Символы.ПС;
        КонецЕсли;
    КонецЕсли;
    // Возвращаем сформированный список учетных записей
    Возврат СписокУчетныхЗаписей;
КонецФункции

// @skip-check module-structure-method-in-regions
&НаКлиенте
Процедура УстановитьВидимость()
	//Получить значение чекбокса Уволен
	Уволен = Объект.Уволен;
	//Установить видимость групп
	Элементы.ГруппаПриУвольнении.Видимость = Уволен;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура УволенПриИзменении(Элемент)
	УстановитьВидимость();
	СформированныйСписокУчетныхЗаписей =  СформироватьСписокУчетныхЗаписей(Объект.УчетныеЗаписи);
	Элементы.СписокУчетныхЗаписей.Заголовок = СформированныйСписокУчетныхЗаписей;
	
	// Вызываем процедуру для формирования Списка рабочих мест
	СформированныйСписокРабочихМест =  СформироватьСписокРабочихМест(Объект.Наименование);
	Элементы.СписокРабочихМест.Заголовок = СформированныйСписокРабочихМест;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура УчетныеЗаписиПриИзменении(Элемент)
	// Вызываем процедуру для формирования Списка учетных записей
	СформированныйСписокУчетныхЗаписей =  СформироватьСписокУчетныхЗаписей(Объект.УчетныеЗаписи);
	Элементы.СписокУчетныхЗаписей.Заголовок = СформированныйСписокУчетныхЗаписей;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимость();
	СформированныйСписокУчетныхЗаписей =  СформироватьСписокУчетныхЗаписей(Объект.УчетныеЗаписи);
	Элементы.СписокУчетныхЗаписей.Заголовок = СформированныйСписокУчетныхЗаписей;
	
	// Вызываем процедуру для формирования Списка рабочих мест
	СформированныйСписокРабочихМест =  СформироватьСписокРабочихМест(Объект.Наименование);
	Элементы.СписокРабочихМест.Заголовок = СформированныйСписокРабочихМест;
КонецПроцедуры

//@skip-check module-structure-method-in-regions
&НаКлиенте
Процедура СоздатьДокументПередачиОтветственности(Команда)
	ОбъектСотрудника = Объект;
	СсылкаНаСотрудника = ОбъектСотрудника.Ссылка;
	ПараметрыФормы = Новый Структура("УвольняемыйСотрудник", СсылкаНаСотрудника);
	//@skip-check use-non-recommended-method
	ПолучитьФорму("Документ.ПередачаОтветственности.Форма.ФормаДокумента", ПараметрыФормы).Открыть();
КонецПроцедуры
