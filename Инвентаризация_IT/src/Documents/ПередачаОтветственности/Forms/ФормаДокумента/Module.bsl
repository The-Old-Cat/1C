 &НаСервереБезКонтекста
Функция ПолучитьДанныеРабочегоМеста(РабочееМесто)

    // Получаем подразделение и ответственного из документа "РабочиеМеста"
    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ
    |    РабочиеМеста.Ссылка,
    |    РабочиеМеста.Подразделение,
    |    РабочиеМеста.Ответственный
    |ИЗ
    |    Документ.РабочиеМеста КАК РабочиеМеста
    |ГДЕ
    |    РабочиеМеста.Ссылка = &РабочееМесто";

    Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
    РезультатЗапроса = Запрос.Выполнить();

    // Создаем массив для хранения данных
    ДанныеРабочегоМеста = Новый Массив;

    Если Не РезультатЗапроса.Пустой() Тогда
        Выборка = РезультатЗапроса.Выбрать();
        Если Выборка.Следующий() Тогда
            // Добавляем подразделение и ответственного в массив
            ДанныеРабочегоМеста.Добавить(Выборка.Ссылка);          
            ДанныеРабочегоМеста.Добавить(Выборка.Подразделение); 
            ДанныеРабочегоМеста.Добавить(Выборка.Ответственный);
            Возврат ДанныеРабочегоМеста; // Возвращаем массив
        КонецЕсли;
    КонецЕсли;

    Возврат Неопределено; // Возвращаем Неопределено, если данные не найдены

КонецФункции


   
 &НаСервере
Функция НайтиСотрудника(Сотрудник)
  Возврат Справочники.Сотрудники.НайтиПоНаименованию(Сотрудник);
КонецФункции
   
   
//  &НаКлиенте
//   Процедура ЗаполнитьТабличныеЧасти(ДанныеСотрудника)
//
//       // Получаем табличные части
//       ТЧУвольняемыйСотрудник = Объект.УвольняемыйСотрудник;
//       ТЧРабочиеМеста = Объект.РабочиеМеста;
//       ТЧНовыеОтветственные = Объект.НовыеОтветственные;
//
//       // Заполняем табличную часть "УвольняемыйСотрудник"
//       ТекущаяСтрокаУвольняемый = ТЧУвольняемыйСотрудник.ТекущиеДанные;
//       ТекущаяСтрокаУвольняемый.Подразделение = ДанныеСотрудника[0];
//
//       // Заполняем табличную часть "РабочиеМеста"
//       СписокРабочихМест = ДанныеСотрудника[1];
//       Для Каждого РабочееМесто Из СписокРабочихМест Цикл
//           НоваяСтрокаРабочееМесто = ТЧРабочиеМеста.Добавить();
//           НоваяСтрокаРабочееМесто.РабочееМесто = РабочееМесто;
//
//           ДанныеРабочегоМеста = ПолучитьДанныеРабочегоМеста(РабочееМесто);
//           Если ДанныеРабочегоМеста <> Неопределено Тогда
//               НоваяСтрокаРабочееМесто.Подразделение = ДанныеРабочегоМеста[0];
//               НоваяСтрокаРабочееМесто.Ответственный = ДанныеРабочегоМеста[1];
//           КонецЕсли;
//       КонецЦикла;
//
//       // Заполняем табличную часть "НовыеОтветственные"
//       Для Каждого РабочееМесто Из СписокРабочихМест Цикл
//           НоваяСтрокаОтветственный = ТЧНовыеОтветственные.Добавить();
//           НоваяСтрокаОтветственный.РабочееМесто = РабочееМесто;
//       КонецЦикла;
//
//   КонецПроцедуры 
//  
//   &НаКлиенте
//   Процедура УвольняемыйСотрудникСотрудникПриИзменении(Элемент)
//       ФИОСотрудника = Элементы.УвольняемыйСотрудник.ТекущиеДанные;
//
//       ОбъектСотрудник = НайтиСотрудника(ФИОСотрудника.Сотрудник);
//
//       Если ОбъектСотрудник <> Неопределено Тогда
//           ДанныеСотрудника = ПолучитьДанныеСотрудники(ОбъектСотрудник);
//           ЗаполнитьТабличныеЧасти(ДанныеСотрудника);
//       КонецЕсли;
//
//   КонецПроцедуры
  
//&НаСервереБезКонтекста
//Функция ПолучитьДанныеРабочегоМеста(РабочееМесто)

//    // Получаем подразделение и ответственного из документа "РабочиеМеста"
//    Запрос = Новый Запрос;
//    Запрос.Текст =
//    "ВЫБРАТЬ
//    |    РабочиеМеста.Подразделение,
//    |    РабочиеМеста.Ответственный
//    |ИЗ
//    |    Документ.РабочиеМеста КАК РабочиеМеста
//    |ГДЕ
//    |    РабочиеМеста.Ссылка = &РабочееМесто";

//    Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
//    РезультатЗапроса = Запрос.Выполнить();

//    // Создаем массив для хранения данных
//    ДанныеРабочегоМеста = Новый Массив;

//    Если Не РезультатЗапроса.Пустой() Тогда
//        Выборка = РезультатЗапроса.Выбрать();
//        Если Выборка.Следующий() Тогда
//            // Добавляем подразделение и ответственного в массив
//            ДанныеРабочегоМеста.Добавить(Выборка.Подразделение); 
//            ДанныеРабочегоМеста.Добавить(Выборка.Ответственный);
//            Возврат ДанныеРабочегоМеста; // Возвращаем массив
//        КонецЕсли;
//    КонецЕсли;

//    Возврат Неопределено; // Возвращаем Неопределено, если данные не найдены

//КонецФункции

// 
// //@skip-check module-structure-method-in-regions
// &НаСервере
//Функция НайтиСотрудника(Сотрудник)
//  Возврат Справочники.Сотрудники.НайтиПоНаименованию(Сотрудник);
//КонецФункции
// 
//@skip-check module-structure-method-in-regions
&НаСервере
Функция ПолучитьДанныеСотрудники(Сотрудник)
	
	ДанныеСотрудник = Новый Структура;
	
	ДанныеСотрудник.Вставить("Подразделение", Сотрудник.Подразделение);
	
	Возврат ДанныеСотрудник;
	
КонецФункции
 
// //@skip-check module-structure-method-in-regions
// &НаКлиенте
// Процедура УвольняемыйСотрудникСотрудникПриИзменении(Элемент)
// 	ФИОСотрудника = Элементы.УвольняемыйСотрудник.ТекущиеДанные;   
//	
//	ОбъектСотрудник = НайтиСотрудника(ФИОСотрудника.Сотрудник); 
//	
//	// Если компьютер найден, получаем данные
//  Если ОбъектСотрудник <> Неопределено Тогда
//    
//    // Получаем структуру с данными компьютера
//    ДанныеСотрудник = ПолучитьДанныеСотрудники(ОбъектСотрудник);
//    
//    // Заполняем реквизиты табличной части
//    ФИОСотрудника.Подразделение = ДанныеСотрудник.Подразделение;
//	
//  КонецЕсли;
// 	
// КонецПроцедуры
// 
// 
 &НаКлиенте
Процедура УвольняемыйСотрудникСотрудникПриИзменении(Элемент)
	
	
	//ЗАПОЛНЕНИЕ ТАБЛИЧНОЙ ЧАСТИ Увольняемый Сотрудник
	ТЧУвольняемыйСотрудник = Элементы.УвольняемыйСотрудник.ТекущиеДанные;   
	
	ОбъектСотрудник = НайтиСотрудника(ТЧУвольняемыйСотрудник.Сотрудник); 
	
	// Если компьютер найден, получаем данные
  Если ОбъектСотрудник <> Неопределено Тогда
    
    // Получаем структуру с данными компьютера
    ДанныеСотрудник = ПолучитьДанныеСотрудники(ОбъектСотрудник);
    
        // Заполняем реквизиты табличной части
   ТЧУвольняемыйСотрудник.Подразделение = ДанныеСотрудник.Подразделение;
	
  КонецЕсли;
 	


	//ЗАПОЛНЕНИЕ ТАБЛИЧНОЙ ЧАСТИ РАБОЧИЕ МЕСТА
   	ТЧРабочиеМеста = Элементы.РабочиеМеста.ТекущиеДанные;
    Если ТЧРабочиеМеста <> Неопределено И ЗначениеЗаполнено(ТЧРабочиеМеста.РабочееМесто) Тогда

        ДанныеРабочегоМеста = ПолучитьДанныеРабочегоМеста(ТЧРабочиеМеста.РабочееМесто);

        Если ДанныеРабочегоМеста <> Неопределено Тогда
       		ТЧРабочиеМеста.РабочееМесто = ДанныеРабочегоМеста[0];
        	ТЧРабочиеМеста.Подразделение = ДанныеРабочегоМеста[1];
        	ТЧРабочиеМеста.Ответственный = ДанныеРабочегоМеста[2];
       КонецЕсли;

    КонецЕсли;
    
    ТЧНовыеОтветственные = Элементы.НовыеОтветственные.ТекущиеДанные;
    
    Если ТЧНовыеОтветственные <> Неопределено И ЗначениеЗаполнено(ТЧНовыеОтветственные.РабочееМесто) Тогда

        ДанныеНовыеОтветственные = ПолучитьДанныеРабочегоМеста(ТЧНовыеОтветственные.РабочееМесто);

        Если ДанныеНовыеОтветственные <> Неопределено Тогда
       		ТЧНовыеОтветственные.РабочееМесто = ДанныеРабочегоМеста[0];
       КонецЕсли;

    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтроки()
	ТЧРабочиеМеста = Объект.РабочиеМеста.Добавить();
	ТЧРабочиеМеста.РабочееМесто = 10;
	
	
	
КонецПроцедуры


// &НаКлиенте
//Процедура РабочиеМестаРабочееМестоПриИзменении(Элемент)

//    ТекущаяСтрока = Элементы.РабочиеМеста.ТекущиеДанные;

//    Если ТекущаяСтрока <> Неопределено И ЗначениеЗаполнено(ТекущаяСтрока.РабочееМесто) Тогда

//        ДанныеРабочегоМеста = ПолучитьДанныеРабочегоМеста(ТекущаяСтрока.РабочееМесто);

//        Если ДанныеРабочегоМеста <> Неопределено Тогда
//            ТекущаяСтрока.Подразделение = ДанныеРабочегоМеста[0]; // Подразделение - первый элемент массива
//            ТекущаяСтрока.Ответственный = ДанныеРабочегоМеста[1]; // Ответственный - второй элемент массива
//        КонецЕсли;

//    КонецЕсли;

//КонецПроцедуры
